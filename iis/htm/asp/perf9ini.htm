<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ASP Scripting Optimization</TITLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script>
<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT><META NAME="DESCRIPTION" CONTENT="Internet Information Services reference information">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services"> 
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H2><A NAME="_k2_asp_scripting_optimization"></A><SUP></SUP>ASP Scripting Optimization</H2>

<P>Code optimization should be performed carefully. In ASP scripting, as in any other programming language, it is important to determine which areas of the application are consuming the most time and resources. This information can then be used to efficiently target the critical area for optimization.</P>

<P>Here are several tips that might help minimize performance problems in your ASP scripts:

<UL type=disc>
	<LI><B>Cache Application-scoped objects and data</B>, either by creating the object in Global.asa, or creating it on-demand in an individual ASP script, and placing it in Application scope.</li>

	<LI><B>Combine output of Response.Write calls</B> by relying on ASP buffering, which is on by default with IIS&nbsp;5.0. In order to improve the perceived performance of applications that use buffered output while performing time-consuming operations, however, your application should periodically use <B>Reponse.Flush</B> to maintain contact with the user.
<P class=tl>If ASP buffering has been disabled for your Web application, performance may be improved if you minimize the number of separate calls to <B>Response.Write</B> by combining separate output strings into one larger string. However, if you must perform extensive string manipulations to accomplish this, the gain in performance is probably offset by the time spent processing the strings.
</li>

	<LI><B>Use &lt;OBJECT&gt; tags instead of Server.CreateObject</B>, when instantiating objects at Application or Session scope. The reason is that IIS delays actually instantiating the object specified by &lt;OBJECT&gt; tags until the object is actually put to use. If you use &lt;OBJECT&gt; tags, and your script never uses the object, then your application will not instantiate the object. In contrast, <B>Server.CreateObject</B> forces IIS to immediately create an instance of the object, whether the object is used by the script or not.</li>

	<LI><B>Use local variables, avoid public variables.</B> Local variables can be accessed quicker by the ASP scripting engine than public variables, because the entire namespace doesn't have to be searched to access the value of a local variable.</li>

	<LI><B>Use client-side validation of user input</B>, where possible, to minimize the HTTP round trips required. If the browser is full-featured, harness the power of the browser, and free up server-side resources for more critical tasks. Of course, some integrity checking still should be performed on the server, depending on the application, as an extra precaution against data corruption.</li>

	<LI><B>Copy individual values from collections into local variables</B>, if you are going to reference the value more than once. This saves ASP from having to perform lookup processing in the collection for each and every reference.</li>

	<LI><B>Turn off session state for the entire application</B>, if possible. If your application does not require the use of IIS sessions, you should use the Internet Information Services snap-in to disable session state for the entire application. Sessions in IIS remain in memory, and the memory allocated to the sessions will not be freed until the session has been terminated or timed-out. If your application is being used by many concurrent users, the server's resources could become depleted, and performance could be affected.<B> </B>If some parts of your application don't need session state, you should disable session state for those pages by using the <A HREF="/iishelp/iis/htm/asp/dire92zp.htm">@ENABLESESSIONSTATE</A> directive.
<P class=tl>Turning off session state whenever possible is especially helpful if the page contains a &lt;FRAMESET&gt; element. Some browsers, including Internet Explorer, will use separate threads to process the separate frames of the frameset. If session state is turned on for the frameset page, the client-side performance benefit of these parallel threads will be lost, because IIS will be forced to serialize the threads processing the separate requests.
</li>

	<LI><B>If you do rely on session state, avoid placing large amounts of data into the Session object, and into session state</B>. Sessions in IIS are persistent, and the memory allocated to the sessions will not be freed until the session has been terminated or timed-out. If your application is being used by many concurrent users, the server's resources could become depleted, and performance could be affected.</li>

	<LI><B>Do not provide empty Session_OnStart or Session_OnEnd. </B> </li>

	<LI><B>Pay close attention to the effects of IIS and ASP configuration changes.</B> See <A HREF="/iishelp/iis/htm/asp/perf24dq.htm">IIS Configuration Optimization</A> for more details.</li>

	<LI><B>If your ASP page is running as part of an application, designate the application as out-of-process for application debugging only.</B> Process isolation, which was introduced in IIS 4.0, is a useful capability. The cross-process marshalling required to support process isolation, however, can introduce a certain amount of overhead to ASP processing. This difference in overhead is most significant for simple ASP pages, and is less of a concern for more complex pages. To maximize scalability and performance, however, consider running the application out-of-process only until it is sufficiently debugged and stable to be run in-process with IIS.</li>

	<LI><B>Avoid ReDimming arrays, if possible.</B> It is more efficient to simply allocate the full size of the array when the array is first initialized.</li>
</UL>
<hr class="iis" size="1">
<p align="center"><em><a href="../../../common/colegal.htm">&copy; 1997-1999 Microsoft Corporation. All rights reserved.</a></em></p>
</BODY>
</HTML>
